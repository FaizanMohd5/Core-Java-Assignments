1) Define a Java class Circle with radius as instance variable and setRadius(), getRadius(),
 getArea() as instance method. Define a class ThickCircle as a subclass of Circle with
 thickness as instance variable and getThickness(), setThickness() as instance methods. 
 Provide an overridden method getArea() to calculate area of thick portion of circle.

Code:



2) Define a class Person with name, age as instance variables. Define three 
overloaded versions of setPerson() in the class as instance methods, first version take
name only, second version take age only, and third version take both.

Code:

package Inheritance.polymorph;

public class Person {
    private String name;
    private int age;
    public void setPerson(String name) {
        this.name = name;
    }
    public void setPerson(int age)  {
        this.age = age;
    }
    public void setPerson(String name, int age) {
        this.name = name;
        this.age = age;
    }
}

package Inheritance;

import Inheritance.polymorph.Person;

public class Main {
    public static void main(String[] args) {
        Person p1 = new Person();
        p1.setPerson(12);

        Person p2 = new Person();
        p2.setPerson("Jake");

        Person p3 = new Person();
        p3.setPerson("AJ",25);
    }
}

3) Define a rectangle calss with length, breadth and border colour as instance variables.
Provide instance methods setLength(), setBreadth(), setColour(), getLength(), getBreadth(),
 getColour() and printRectangleColout(). Create a subclass FilledRectangle of rectangle class
 with fill colour (inside region of rectangle) as instance variable. Provide setters and getters
 along with overridden method printRectangleColour() to display border colour as well as filled
 colour.
 
 Code:
 
 package Inheritance.polymorph;

public class Rectangle {
    private double length;
    private double breadth;
    private String borderColour;
    public void setLength(double length)    {
        this.length = length;
    }
    public void setBreadth(double breadth)  {
        this.breadth = breadth;
    }
    public void setBorderColour(String borderColour)    {
        this.borderColour = borderColour;
    }
    public double getLength()   {
        return length;
    }
    public double getBreadth() {
        return breadth;
    }
    public String getBorderColour() {
        return borderColour;
    }
    public void printRectangleColour()  {
        System.out.println("Rectangle Colour : "+borderColour);
    }
}

package Inheritance.polymorph;

public class FilledRectangle extends Rectangle{
    private String filledColour;
    public void setFilledColour(String filledColour) {
        this.filledColour = filledColour;
    }
    public String getFilledColour() {
        return filledColour;
    }
    @Override
    public void printRectangleColour() {
        System.out.println("Border colour : "+super.getBorderColour());
        System.out.println("Filled colour : "+filledColour);
    }
}

package Inheritance;
import Inheritance.polymorph.*;
public class Main {
    public static void main(String[] args) {

        System.out.println("ref var : Derived class, object : Derived class");
        FilledRectangle r1 = new FilledRectangle();
        r1.setBorderColour("Black");
        r1.setFilledColour("Grey");

        r1.printRectangleColour(); // overridden method binded


        System.out.println("\nref var : Base class, object : Derived class");
        Rectangle r2 = new FilledRectangle();
        r2.setBorderColour("Green");
        r2.printRectangleColour();
        // In case of C++ we had to use virtual function

        System.out.println("\nref var : Base class, object : Base class");
        Rectangle r3 = new Rectangle();
        r3.setBorderColour("Red");
        r3.printRectangleColour();
        // base class method works here (which is correct)
    }
}


4) Define a class Coordinate with x and y as instance variables. Define overloaded 
 versions of getDistance(), first with no argument calculating distance from origin, and 
 second with one argument of Coordinate type to calculate distance between two coordinates.
 Also define other methods if required.
 
 Code:
 
 package Inheritance.polymorph;
import java.lang.Math;
public class Coordinate {
    private double x;
    private double y;
    public Coordinate() {
        this.x = 0;
        this.y = 0;
    }
    public Coordinate(double x, double y) {
        this.x = x;
        this.y = y;
    }
    public double getX() {
        return x;
    }
    public double getY() {
        return y;
    }
    public double getDistance()   {
        return Math.sqrt( (x*x) + (y*y) ); //origin
        //formula : root over x square plus y square
    }
    public double getDistance(Coordinate other)   {
        //formula : root over (x2-x1) whole square plus (y2-y1) whole square
        double x1 = other.getX();
        double y1 = other.getY();
        double x2 = this.getX();
        double y2 = this.getY();

        return Math.sqrt( Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2) );
    }
}

package Inheritance;
import Inheritance.polymorph.*;
public class Main {
    public static void main(String[] args) {
        Coordinate c1 = new Coordinate(4.6,5.0);
        Coordinate c2 = new Coordinate(3.5,8.7);

        System.out.println("c1 : "+c1.getDistance()); //from origin

        System.out.println("c2 : "+c2.getDistance(c1)); //from two points
    }
}

 
5) Define a class Person with name as instance variable. Provide setter and getters.
 Provide overloaded versions of showName() method, one without argument to display name
 of the person and second with one argument title ("Mr" or "Ms) to display name with title.
 
 Code:
 
 package Inheritance.polymorph;

public class Person {
    private String name;
    public void setName(String name) {
        this.name = name;
    }
    public String getName() {
        return name;
    }
    public void showName()  {
        System.out.println(getName());
    }
    public void showName(String title)  {
        System.out.println(title+" "+getName());
    }
}


 package Inheritance;

import Inheritance.polymorph.Person;

public class Main {
    public static void main(String[] args) {
        Person p1 = new Person();
        p1.setName("Faizan");
        p1.showName();

        Person p2 = new Person();
        p2.setName("Yousuf");
        p2.showName("Ms");
    }
}
